{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"spotify/mkdocs-monorepo-plugin \u00b6 Note: This plugin is in beta. Whilst it is not expected to significantly change in functionality, it may not yet be fully compatible with other Mkdocs configuration and thus may break with some advanced configurations. Once these have been resolved and all bugs have been ironed out, we will move this to a stable release. \u271a This plugin enables you to build multiple sets of documentation in a single Mkdocs. It is designed to address writing documentation in Spotify's largest and most business-critical codebases (typically monoliths or monorepos). \u270f\ufe0f Blog Post | \ud83d\udc0d Python Package | \u271a Demo | \ud83d\udcd5 Docs Features \u00b6 Support for multiple docs/ folders in Mkdocs. Having a single docs/ folder in a large codebase is hard to maintain. Who owns which documentation? What code is it associated with? Bringing docs closer to the associated code enables you to update them better, as well as leverage folder-based features such as GitHub Codeowners . Support for multiple navigations. In Spotify, large repositories typically are split up by multiple owners. These are split by folders. By introducing multiple mkdocs.yml files along with multiple docs/ folder, each team can take ownership of their own navigation. This plugin then intelligently merges of the documentation together into a single repository. Support across multiple repositories. Using Git Submodules it is possible to merge documentation across multiple repositories into a single codebase dynamically. The same great Mkdocs developer experience. It is possible to run mkdocs serve in the root to merge all of your documentation together, or in a subfolder to build specific documentation. Autoreload still works as usual. No more using symlinks ! Install \u00b6 It's easy to get started using PyPI and pip using Python: $ pip install mkdocs-monorepo-plugin Usage \u00b6 Take a look at our sample project or do the following: In the root, add the monorepo to your plugins key in mkdocs.yml Create a subfolder, with a mkdocs.yml with a site_name and nav , as well as a docs/ folder with an index.md Back in in the root mkdocs.yml , use the !include syntax in your nav to link to to a subfolder mkdocs.yml Example root /mkdocs.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 site_name : Cats API # You can declare \"!include\" statements here . This enables you # to include mkdocs . yml that are located in subfolders . In this # case we have two folders ( v1 / and v2/ ) and wish to merge them # into this single navigation . The 'Intro' and 'Authentication' # files are located in the root docs / folder as usual . nav : - Intro : 'index.md' - Authentication : 'authentication.md' - API : - v1 : '!include ./v1/mkdocs.yml' - v2 : '!include ./v2/mkdocs.yml' plugins : - monorepo Example submodule /v1/mkdocs.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # In this case , we use the site_name to figure out how we should merge # this with the root documentation . It should refer to a folder structure . # The example below will merge documentation as following : # # reference . md -> docs / versions / v1 / reference . md -> http : // localhost : 8000 / versions / v1 / reference / # changelog . md -> docs / versions / v1 / changelog . md -> http : // localhost : 8000 / versions / v1 / changelog / # site_name : versions / v1 nav : - Reference : \"reference.md\" - Changelog : \"changelog.md\" nav : - code - samples . md Example submodule /v2/mkdocs.yml 1 2 3 4 5 6 7 8 9 10 11 12 # It works the same as above , but with relative to the site_name we use here : # # migrating . md -> docs / versions / v2 / migrating . md -> http : // localhost : 8000 / versions / v2 / migrating / # reference . md -> docs / versions / v2 / reference . md -> http : // localhost : 8000 / versions / v2 / reference / # changelog . md -> docs / versions / v2 / changelog . md -> http : // localhost : 8000 / versions / v2 / changelog / site_name : versions / v2 nav : - Migrating to v2 : \"migrating.md\" - Reference : \"reference.md\" - Changelog : \"changelog.md\" An example filetree when using the Mkdocs Monorepo plugin looks like this: $ tree . \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 authentication.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 docs \u2502 \u2502 \u251c\u2500\u2500 changelog.md \u2502 \u2502 \u2514\u2500\u2500 reference.md \u2502 \u2514\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 v2 \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 changelog.md \u2502 \u251c\u2500\u2500 migrating.md \u2502 \u2514\u2500\u2500 reference.md \u2514\u2500\u2500 mkdocs.yml 5 directories, 10 files Supported Versions \u00b6 Python 3 \u2014 3.5, 3.6, 3.7 Mkdocs 1.0.4 and above. License \u00b6 Released under the Apache 2.0 License. See here for more details. Contributing \u00b6 Check out our CONTRIBUTING for more details. Extra Reading \u00b6 mkdocs on GitHub Mkdocs documentation This was built using the mkdocs-plugin-template","title":"Getting Started"},{"location":"#spotifymkdocs-monorepo-plugin","text":"Note: This plugin is in beta. Whilst it is not expected to significantly change in functionality, it may not yet be fully compatible with other Mkdocs configuration and thus may break with some advanced configurations. Once these have been resolved and all bugs have been ironed out, we will move this to a stable release. \u271a This plugin enables you to build multiple sets of documentation in a single Mkdocs. It is designed to address writing documentation in Spotify's largest and most business-critical codebases (typically monoliths or monorepos). \u270f\ufe0f Blog Post | \ud83d\udc0d Python Package | \u271a Demo | \ud83d\udcd5 Docs","title":"spotify/mkdocs-monorepo-plugin"},{"location":"#features","text":"Support for multiple docs/ folders in Mkdocs. Having a single docs/ folder in a large codebase is hard to maintain. Who owns which documentation? What code is it associated with? Bringing docs closer to the associated code enables you to update them better, as well as leverage folder-based features such as GitHub Codeowners . Support for multiple navigations. In Spotify, large repositories typically are split up by multiple owners. These are split by folders. By introducing multiple mkdocs.yml files along with multiple docs/ folder, each team can take ownership of their own navigation. This plugin then intelligently merges of the documentation together into a single repository. Support across multiple repositories. Using Git Submodules it is possible to merge documentation across multiple repositories into a single codebase dynamically. The same great Mkdocs developer experience. It is possible to run mkdocs serve in the root to merge all of your documentation together, or in a subfolder to build specific documentation. Autoreload still works as usual. No more using symlinks !","title":"Features"},{"location":"#install","text":"It's easy to get started using PyPI and pip using Python: $ pip install mkdocs-monorepo-plugin","title":"Install"},{"location":"#usage","text":"Take a look at our sample project or do the following: In the root, add the monorepo to your plugins key in mkdocs.yml Create a subfolder, with a mkdocs.yml with a site_name and nav , as well as a docs/ folder with an index.md Back in in the root mkdocs.yml , use the !include syntax in your nav to link to to a subfolder mkdocs.yml Example root /mkdocs.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 site_name : Cats API # You can declare \"!include\" statements here . This enables you # to include mkdocs . yml that are located in subfolders . In this # case we have two folders ( v1 / and v2/ ) and wish to merge them # into this single navigation . The 'Intro' and 'Authentication' # files are located in the root docs / folder as usual . nav : - Intro : 'index.md' - Authentication : 'authentication.md' - API : - v1 : '!include ./v1/mkdocs.yml' - v2 : '!include ./v2/mkdocs.yml' plugins : - monorepo Example submodule /v1/mkdocs.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # In this case , we use the site_name to figure out how we should merge # this with the root documentation . It should refer to a folder structure . # The example below will merge documentation as following : # # reference . md -> docs / versions / v1 / reference . md -> http : // localhost : 8000 / versions / v1 / reference / # changelog . md -> docs / versions / v1 / changelog . md -> http : // localhost : 8000 / versions / v1 / changelog / # site_name : versions / v1 nav : - Reference : \"reference.md\" - Changelog : \"changelog.md\" nav : - code - samples . md Example submodule /v2/mkdocs.yml 1 2 3 4 5 6 7 8 9 10 11 12 # It works the same as above , but with relative to the site_name we use here : # # migrating . md -> docs / versions / v2 / migrating . md -> http : // localhost : 8000 / versions / v2 / migrating / # reference . md -> docs / versions / v2 / reference . md -> http : // localhost : 8000 / versions / v2 / reference / # changelog . md -> docs / versions / v2 / changelog . md -> http : // localhost : 8000 / versions / v2 / changelog / site_name : versions / v2 nav : - Migrating to v2 : \"migrating.md\" - Reference : \"reference.md\" - Changelog : \"changelog.md\" An example filetree when using the Mkdocs Monorepo plugin looks like this: $ tree . \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 authentication.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 docs \u2502 \u2502 \u251c\u2500\u2500 changelog.md \u2502 \u2502 \u2514\u2500\u2500 reference.md \u2502 \u2514\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 v2 \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 changelog.md \u2502 \u251c\u2500\u2500 migrating.md \u2502 \u2514\u2500\u2500 reference.md \u2514\u2500\u2500 mkdocs.yml 5 directories, 10 files","title":"Usage"},{"location":"#supported-versions","text":"Python 3 \u2014 3.5, 3.6, 3.7 Mkdocs 1.0.4 and above.","title":"Supported Versions"},{"location":"#license","text":"Released under the Apache 2.0 License. See here for more details.","title":"License"},{"location":"#contributing","text":"Check out our CONTRIBUTING for more details.","title":"Contributing"},{"location":"#extra-reading","text":"mkdocs on GitHub Mkdocs documentation This was built using the mkdocs-plugin-template","title":"Extra Reading"},{"location":"CHANGELOG/","text":"Changelog \u00b6 0.4.9 \u00b6 Fix issue using plugin on Windows when site_name contains slash 0.4.8 \u00b6 Dropped support for Python 3.4 in setup.py 0.4.6 \u00b6 Fixes compatibility issue with mkdocs-git-revision-date-localized-plugin 0.4.5 \u00b6 Bumped up mkdocs to 1.1.1 and added compatibility (gh-16) 0.4.4 \u00b6 Bumped up mkdocs to 1.1 and mkdocs-material to 5.1.0 0.4.3 \u00b6 Fixed bug with trailing slash in Windows ( #9 ) Fixed bug with README 0.4.1 \u00b6 Fixed bug with root docs/ folder not working with livereload Fixed bug with mkdocs.yml in subfolders not working with livereload 0.4.0 \u00b6 Initial release.","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#049","text":"Fix issue using plugin on Windows when site_name contains slash","title":"0.4.9"},{"location":"CHANGELOG/#048","text":"Dropped support for Python 3.4 in setup.py","title":"0.4.8"},{"location":"CHANGELOG/#046","text":"Fixes compatibility issue with mkdocs-git-revision-date-localized-plugin","title":"0.4.6"},{"location":"CHANGELOG/#045","text":"Bumped up mkdocs to 1.1.1 and added compatibility (gh-16)","title":"0.4.5"},{"location":"CHANGELOG/#044","text":"Bumped up mkdocs to 1.1 and mkdocs-material to 5.1.0","title":"0.4.4"},{"location":"CHANGELOG/#043","text":"Fixed bug with trailing slash in Windows ( #9 ) Fixed bug with README","title":"0.4.3"},{"location":"CHANGELOG/#041","text":"Fixed bug with root docs/ folder not working with livereload Fixed bug with mkdocs.yml in subfolders not working with livereload","title":"0.4.1"},{"location":"CHANGELOG/#040","text":"Initial release.","title":"0.4.0"},{"location":"CODE-OF-CONDUCT/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at fossboard@spotify.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"CODE-OF-CONDUCT/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"CODE-OF-CONDUCT/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"CODE-OF-CONDUCT/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE-OF-CONDUCT/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"CODE-OF-CONDUCT/#scope","text":"This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"CODE-OF-CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at fossboard@spotify.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"CODE-OF-CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"CONTRIBUTING/","text":"Contributing \u00b6 We welcome contributions! We believe that by fostering a healthy, inclusive, and active open source community that we will be able to build better software for all. A large part of that is by having an enforced code of conduct as well easy to use contributing guidelines. Prerequisites \u00b6 Python 3+ or above (with Pip) Mkdocs 1.0.4 or above Docker Git Build from source \u00b6 This part should be easy. If it's not, let us know! The first thing you'll want to do is import the repository and open up the directory. $ git clone git@github.com:spotify/mkdocs-monorepo-plugin.git Then using the --editable flag, you can install the package locally. This points the actual plugin to the folder which allows you to make changes dynamically without having to re-install it every time you want to test a change. $ cd mkdocs-monorepo-plugin/ $ pip install --editable . $ pip install -r requirements.txt Great, now you have the monorepo plugin available in Mkdocs . This allows you to do the following in an mkdocs.yml without errors: site_name : Example Site plugins : - monorepo Of course, you'll need a folder to test it in. There is a conveniently folder named sample-docs/ folder that you can use to test your changes, although you can run mkdocs serve in any project you want as long as the mkdocs.yml has monorepo mentioned in the plugins key. $ cd sample-docs/ $ mkdocs serve Optionally, you can run it using Mkdocs Material which is what is powering the docs you're currently looking at. It makes Mkdocs really nice to work with. You can then simply pass through --theme to your mkdocs serve command like usual. $ pip install mkdocs-material $ mkdocs serve --theme material That's pretty much it. Experiment, play about, make the changes you need. How does it work? \u00b6 Oh yes, that's worth mentioning! It works quite easily actually. There are two parts to the process: resolving the navigation, and merging the documentation folders. Resolving the navigation \u00b6 This is responsible for making sure whenever you use the !include statement in nav inside our mkdocs.yml that we appropriately open up the included file, get the nav , and then appropriately import that into the root nav . So to give you an example: Source mkdocs.yml files # mkdocs.yml site_name : Example Site plugins : - monorepo nav : - Getting Started : README.md - Design : '!include teams/design/mkdocs.yml' - Contributing : contributing.md # teams/design/mkdocs.yml site_name : design-folder-alias nav : - Menus : components/menus.md - Tabs : components/tabs.md - Playback Buttons : components/playback-buttons.md Output mkdocs.yml site_name : Example Site plugins : - monorepo nav : - Getting Started : README.md - Design : - Menus : design-folder-alias/components/menus.md - Tabs : design-folder-alias/components/tabs.md - Playback Buttons : design-folder-alias/components/playback-buttons.md - Contributing : contributing.md Note that we've added a design-folder-alias/ to the links under Design. This is because when merging the docs in the next step, it is not possible to meaningfully merge them all into a single docs/ folder due to the likelihood of conflicts. Due to this, we made a design decision to repurpose the site_name to act as an alias when it is included in a monorepo context and uses this when it tries to create a \"single\" set of docs by using the alias as a folder. The Python code related to this component lives in mkdocs_monorepo_plugin/parser.py . Merging the docs folders \u00b6 This takes the work the resolver does and applies it to reality. It is responsible for creating a temporary folder using Python's TemporaryFolder() and moves the root docs/ folder, as well as the docs/ folders of all included paths from the root nav . As mentioned, it also takes their site_name values and uses that to indicate where it should be placed in our \"merged\" documentation folder. The Python code related to this component lives in mkdocs_monorepo_plugin/merger.py . Making a change \u00b6 That's excellent! We're very happy that you'd like to contribute. We are very welcoming to any contributions. It is important to note a few things before you do so: Consider opening an issue first. It's easy to fall into the trap to create a bug for something that isn't agreed upon. GitHub issues is a great way to act as a validator for your contribution ideas. We try our best to engage in these as much as possible to make this as painless as possible, as it's easier to write the code than discuss it. It also significantly reduces the chances of us rejecting it. Write tests. Of course, shipping stuff is pretty cool. Especially when it's a really nice improvement. In this case, there will have many others depending on our source code. It is a small ask for ask you to test your code in a basic capacity, so that it isn't prone to being broken or removed in the future accidentally. Adding complete test coverage is something we will suggest on a case-by-case basis, depending on the type of change it is. Not every contribution will be approved. Of course, given how much volunteered time you and others spend, it is a great way of saying thank you for to accept and merge every pull request - but in reality, doing so is more harmful than valuable. We want to leverage open source to make software better for everyone rather than for a few. This means considering the long-term value of changes, as well as any impact it may have - will it break existing integrations? will it slow performance? is this a convention others will understand? As a general rule of thumb, we highly encourage you open a GitHub issue first to discuss your ideas. It will help everyone in the long run for just a little bit more time. That out of the way, here's what you need to do: $ git checkout -b username/branch-name # ... make your changes $ code ./setup.py # make sure you bump up the version on line 6 $ git add --patch # validate your changes $ git commit -m 'changed X and Y' # ensure you write a meaningful commit message $ git push -u origin HEAD It might say you don't have permissions to push to our repository. That's alright, using hub fork you can fork the repository on GitHub and then replace the origin remote with your own directly from your Terminal: $ hub fork --remote-name origin $ git remote rm origin $ git remote add origin git@github.com:[USERNAME]/mkdocs-monorepo-plugin.git $ git push -u origin HEAD $ hub pull-request -b spotify:master --message 'Pull request title' --browse # add --draft if you want to push it as a draft PR This will create the pull request in our repository. You can of course do it through GitHub.com or their desktop clients too :) Running tests \u00b6 The command below will use Docker to run our test suites in numerous Python versions. It may take some time on first run, but should be very fast afterwards. When you're done, feel free to run docker prune to clear them from your local cache. We use the slim versions of the public python images from Docker Hub . $ ./__tests__/test-local.sh For faster tests, you can opt to run in Python 3.7 rather than all supported Python versions: $ PYTHON_37_ONLY=1 ./__tests__/test-local.sh GitHub Actions will always execute tests a little faster (due to parallelization) when you push your branch. Due to this, you can choose to opt of running them locally if you wish! Submitting a PR \u00b6 Feel free to open up a PR and share why you think this change is valuable (unless it's something obvious, like a typo or confirmed bug). Assuming it is a change that is wanted, a maintainer will take a look to see if there's any changes needed.","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"We welcome contributions! We believe that by fostering a healthy, inclusive, and active open source community that we will be able to build better software for all. A large part of that is by having an enforced code of conduct as well easy to use contributing guidelines.","title":"Contributing"},{"location":"CONTRIBUTING/#prerequisites","text":"Python 3+ or above (with Pip) Mkdocs 1.0.4 or above Docker Git","title":"Prerequisites"},{"location":"CONTRIBUTING/#build-from-source","text":"This part should be easy. If it's not, let us know! The first thing you'll want to do is import the repository and open up the directory. $ git clone git@github.com:spotify/mkdocs-monorepo-plugin.git Then using the --editable flag, you can install the package locally. This points the actual plugin to the folder which allows you to make changes dynamically without having to re-install it every time you want to test a change. $ cd mkdocs-monorepo-plugin/ $ pip install --editable . $ pip install -r requirements.txt Great, now you have the monorepo plugin available in Mkdocs . This allows you to do the following in an mkdocs.yml without errors: site_name : Example Site plugins : - monorepo Of course, you'll need a folder to test it in. There is a conveniently folder named sample-docs/ folder that you can use to test your changes, although you can run mkdocs serve in any project you want as long as the mkdocs.yml has monorepo mentioned in the plugins key. $ cd sample-docs/ $ mkdocs serve Optionally, you can run it using Mkdocs Material which is what is powering the docs you're currently looking at. It makes Mkdocs really nice to work with. You can then simply pass through --theme to your mkdocs serve command like usual. $ pip install mkdocs-material $ mkdocs serve --theme material That's pretty much it. Experiment, play about, make the changes you need.","title":"Build from source"},{"location":"CONTRIBUTING/#how-does-it-work","text":"Oh yes, that's worth mentioning! It works quite easily actually. There are two parts to the process: resolving the navigation, and merging the documentation folders.","title":"How does it work?"},{"location":"CONTRIBUTING/#resolving-the-navigation","text":"This is responsible for making sure whenever you use the !include statement in nav inside our mkdocs.yml that we appropriately open up the included file, get the nav , and then appropriately import that into the root nav . So to give you an example: Source mkdocs.yml files # mkdocs.yml site_name : Example Site plugins : - monorepo nav : - Getting Started : README.md - Design : '!include teams/design/mkdocs.yml' - Contributing : contributing.md # teams/design/mkdocs.yml site_name : design-folder-alias nav : - Menus : components/menus.md - Tabs : components/tabs.md - Playback Buttons : components/playback-buttons.md Output mkdocs.yml site_name : Example Site plugins : - monorepo nav : - Getting Started : README.md - Design : - Menus : design-folder-alias/components/menus.md - Tabs : design-folder-alias/components/tabs.md - Playback Buttons : design-folder-alias/components/playback-buttons.md - Contributing : contributing.md Note that we've added a design-folder-alias/ to the links under Design. This is because when merging the docs in the next step, it is not possible to meaningfully merge them all into a single docs/ folder due to the likelihood of conflicts. Due to this, we made a design decision to repurpose the site_name to act as an alias when it is included in a monorepo context and uses this when it tries to create a \"single\" set of docs by using the alias as a folder. The Python code related to this component lives in mkdocs_monorepo_plugin/parser.py .","title":"Resolving the navigation"},{"location":"CONTRIBUTING/#merging-the-docs-folders","text":"This takes the work the resolver does and applies it to reality. It is responsible for creating a temporary folder using Python's TemporaryFolder() and moves the root docs/ folder, as well as the docs/ folders of all included paths from the root nav . As mentioned, it also takes their site_name values and uses that to indicate where it should be placed in our \"merged\" documentation folder. The Python code related to this component lives in mkdocs_monorepo_plugin/merger.py .","title":"Merging the docs folders"},{"location":"CONTRIBUTING/#making-a-change","text":"That's excellent! We're very happy that you'd like to contribute. We are very welcoming to any contributions. It is important to note a few things before you do so: Consider opening an issue first. It's easy to fall into the trap to create a bug for something that isn't agreed upon. GitHub issues is a great way to act as a validator for your contribution ideas. We try our best to engage in these as much as possible to make this as painless as possible, as it's easier to write the code than discuss it. It also significantly reduces the chances of us rejecting it. Write tests. Of course, shipping stuff is pretty cool. Especially when it's a really nice improvement. In this case, there will have many others depending on our source code. It is a small ask for ask you to test your code in a basic capacity, so that it isn't prone to being broken or removed in the future accidentally. Adding complete test coverage is something we will suggest on a case-by-case basis, depending on the type of change it is. Not every contribution will be approved. Of course, given how much volunteered time you and others spend, it is a great way of saying thank you for to accept and merge every pull request - but in reality, doing so is more harmful than valuable. We want to leverage open source to make software better for everyone rather than for a few. This means considering the long-term value of changes, as well as any impact it may have - will it break existing integrations? will it slow performance? is this a convention others will understand? As a general rule of thumb, we highly encourage you open a GitHub issue first to discuss your ideas. It will help everyone in the long run for just a little bit more time. That out of the way, here's what you need to do: $ git checkout -b username/branch-name # ... make your changes $ code ./setup.py # make sure you bump up the version on line 6 $ git add --patch # validate your changes $ git commit -m 'changed X and Y' # ensure you write a meaningful commit message $ git push -u origin HEAD It might say you don't have permissions to push to our repository. That's alright, using hub fork you can fork the repository on GitHub and then replace the origin remote with your own directly from your Terminal: $ hub fork --remote-name origin $ git remote rm origin $ git remote add origin git@github.com:[USERNAME]/mkdocs-monorepo-plugin.git $ git push -u origin HEAD $ hub pull-request -b spotify:master --message 'Pull request title' --browse # add --draft if you want to push it as a draft PR This will create the pull request in our repository. You can of course do it through GitHub.com or their desktop clients too :)","title":"Making a change"},{"location":"CONTRIBUTING/#running-tests","text":"The command below will use Docker to run our test suites in numerous Python versions. It may take some time on first run, but should be very fast afterwards. When you're done, feel free to run docker prune to clear them from your local cache. We use the slim versions of the public python images from Docker Hub . $ ./__tests__/test-local.sh For faster tests, you can opt to run in Python 3.7 rather than all supported Python versions: $ PYTHON_37_ONLY=1 ./__tests__/test-local.sh GitHub Actions will always execute tests a little faster (due to parallelization) when you push your branch. Due to this, you can choose to opt of running them locally if you wish!","title":"Running tests"},{"location":"CONTRIBUTING/#submitting-a-pr","text":"Feel free to open up a PR and share why you think this change is valuable (unless it's something obvious, like a typo or confirmed bug). Assuming it is a change that is wanted, a maintainer will take a look to see if there's any changes needed.","title":"Submitting a PR"},{"location":"limitations/","text":"Caveats / Known Design Decisions \u00b6 In an included mkdocs.yml , you cannot have !include . It is only supported in the root mkdocs.yml In an included mkdocs.yml , your site_name must adhere follow the regular expression: ^[a-zA-Z0-9_\\-/]+$ In an included mkdocs.yml , it currently looks for the relative docs/ folder and does not respect the docs_dir value.","title":"Limitations"},{"location":"limitations/#caveats-known-design-decisions","text":"In an included mkdocs.yml , you cannot have !include . It is only supported in the root mkdocs.yml In an included mkdocs.yml , your site_name must adhere follow the regular expression: ^[a-zA-Z0-9_\\-/]+$ In an included mkdocs.yml , it currently looks for the relative docs/ folder and does not respect the docs_dir value.","title":"Caveats / Known Design Decisions"},{"location":"philosophy/","text":"Philosophy \u00b6 This plugin is designed to solve documentation in large codebases \u2014 whether monorepos, monoliths or sizeable codebases in general \u2014 by enabling Mkdocs to be split out into smaller documentation folders. Then when shipping a change to production, merge the documentation together into a single, digestable site. Typically, in these large codebases, there is often complex ownership. Teams may own folders, files, or even parts of a single file. This localizes documentation to the code so it can seamlessly inherit ownership strategies designed for code, such as GitHub Codeowners . It was originally designed to improve the documentation process in Spotify's critical software, some which are monoliths with complex ownership across many teams, offices, and continents.","title":"Philosophy"},{"location":"philosophy/#philosophy","text":"This plugin is designed to solve documentation in large codebases \u2014 whether monorepos, monoliths or sizeable codebases in general \u2014 by enabling Mkdocs to be split out into smaller documentation folders. Then when shipping a change to production, merge the documentation together into a single, digestable site. Typically, in these large codebases, there is often complex ownership. Teams may own folders, files, or even parts of a single file. This localizes documentation to the code so it can seamlessly inherit ownership strategies designed for code, such as GitHub Codeowners . It was originally designed to improve the documentation process in Spotify's critical software, some which are monoliths with complex ownership across many teams, offices, and continents.","title":"Philosophy"}]}